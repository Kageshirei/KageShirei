//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::{entity::prelude::*, sqlx::types::chrono::Utc, ActiveValue::Set};
use serde::{Deserialize, Serialize};

use crate::{active_enums::CommandStatus, helpers::CUID2};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "agent_command")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: String,
    pub agent_id: String,
    pub command: Json,
    #[sea_orm(column_type = "Text", nullable)]
    pub output: Option<String>,
    pub exit_code: Option<i32>,
    pub status: CommandStatus,
    pub retrieved_at: Option<DateTime>,
    pub completed_at: Option<DateTime>,
    pub failed_at: Option<DateTime>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::agent::Entity",
        from = "Column::AgentId",
        to = "super::agent::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Agent,
}

impl Related<super::agent::Entity> for Entity {
    fn to() -> RelationDef { Relation::Agent.def() }
}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            // Generate a new unique ID
            id: Set(CUID2.create_id()),
            ..ActiveModelTrait::default()
        }
    }

    async fn before_save<C>(self, _db: &C, insert: bool) -> Result<Self, DbErr>
                                                         where
                                                             C: ConnectionTrait,
    {
        // Clone the model to avoid moving it
        let mut model = self;

        if insert {
            // Update the `created_at` field with the current time
            model.created_at = Set(Utc::now().naive_utc());
        }

        // Update the `updated_at` field with the current time
        model.updated_at = Set(Utc::now().naive_utc());
        Ok(model)
    }
}
