//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use crate::active_enums::AgentIntegrity;
use crate::helpers::CUID2;
use rs2_communication_protocol::network_interface::NetworkInterface;
use sea_orm::entity::prelude::*;
use sea_orm::sqlx::types::chrono::Utc;
use sea_orm::ActiveValue::Set;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "agent")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: String,
    pub operating_system: String,
    pub hostname: String,
    pub domain: Option<String>,
    pub username: String,
    pub network_interfaces: NetworkInterface,
    pub pid: i64,
    pub ppid: i64,
    pub process_name: String,
    pub integrity: AgentIntegrity,
    pub cwd: String,
    pub server_secret: String,
    pub secret: String,
    #[sea_orm(unique)]
    pub signature: String,
    pub terminated_at: Option<DateTime>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            // Generate a new unique ID
            id: Set(CUID2.create_id()),
            ..ActiveModelTrait::default()
        }
    }

    async fn before_save<C>(mut self, db: &C, insert: bool) -> Result<Self, DbErr>
                            where C: ConnectionTrait
    {
        // Update the `updated_at` field with the current time
        self.updated_at = Set(Utc::now().naive_utc());
        Ok(self)
    }
}
