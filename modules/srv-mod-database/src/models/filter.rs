use chrono::Utc;
use diesel::prelude::*;

use crate::schema_extension::{AgentFields, FilterOperator, LogicalOperator};

/// The User model, identifies a RS2 operator
#[derive(Debug, Queryable, Selectable, Clone, PartialEq)]
#[diesel(table_name = crate::schema::filters)]
pub struct Filter {
	/// The unique identifier of the filter
	pub id: String,
	/// The associated agent profile id
	pub agent_profile_id: String,
	/// The field to apply the filter on
	pub agent_field: AgentFields,
	/// The operator to apply to the field
	pub filter_op: FilterOperator,
	/// The value to compare the field with
	pub value: String,
	/// The sequence of the filter in the filter chain, order matters
	pub sequence: i32,
	/// The logical operator to apply to the filter
	pub next_hop_relation: Option<LogicalOperator>,
	/// Whether the filter is the start of a grouping of filters (aka open parenthesis)
	pub grouping_start: bool,
	/// Whether the filter is the end of a grouping of filters (aka close parenthesis)
	pub grouping_end: bool,
	/// Creation date of the agent profile
	pub created_at: chrono::DateTime<Utc>,
	/// Last time the agent profile was updated
	pub updated_at: chrono::DateTime<Utc>,
}

#[derive(Debug, Insertable)]
#[diesel(table_name = crate::schema::filters)]
/// This object must be generated using the unpacking constructor on its ::default method and then the edit of all its fields
/// except for the id, which is generated by the CUID2 crate.
pub struct CreateFilter {
	/// The unique identifier of the filter
	pub id: String,
	/// The associated agent profile id
	pub agent_profile_id: String,
	/// The field to apply the filter on
	pub agent_field: AgentFields,
	/// The operator to apply to the field
	pub filter_op: FilterOperator,
	/// The value to compare the field with
	pub value: String,
	/// The sequence of the filter in the filter chain, order matters
	pub sequence: i32,
	/// The logical operator to apply to the filter
	pub next_hop_relation: Option<LogicalOperator>,
	/// Whether the filter is the start of a grouping of filters (aka open parenthesis)
	pub grouping_start: bool,
	/// Whether the filter is the end of a grouping of filters (aka close parenthesis)
	pub grouping_end: bool,
}
