use chrono::Utc;
use diesel::prelude::*;

use crate::CUID2;

/// The User model, identifies a RS2 operator
#[derive(Debug, Queryable, Selectable, Clone, PartialEq)]
#[diesel(table_name = crate::schema::agent_profiles)]
pub struct AgentProfile {
	/// The unique identifier for the agent profile
	pub id: String,
	/// The profile name
	pub name: String,
	/// Unix timestamp of the agent's kill date
	pub kill_date: Option<i64>,
	/// Array of unix timestamps of the hours the agent is allowed to work, in the format `[start, end]`.
	/// If empty, the agent is allowed to work 24/7.
	/// If more than 2 elements, the agent is allowed to work in multiple time ranges in the same day always in pairs
	/// of `[start, end]`, if the number of elements is odd, the last element is ignored
	pub working_hours: Option<Vec<Option<i64>>>,
	/// The agent's polling interval in milliseconds
	pub polling_interval: Option<i64>,
	/// The agent's polling jitter in milliseconds
	pub polling_jitter: Option<i64>,
	/// Creation date of the agent profile
	pub created_at: chrono::DateTime<Utc>,
	/// Last time the agent profile was updated
	pub updated_at: chrono::DateTime<Utc>,
}

#[derive(Debug, Insertable)]
#[diesel(table_name = crate::schema::agent_profiles)]
/// This object must be generated using the unpacking constructor on its ::default method and then the edit of all its fields
/// except for the id, which is generated by the CUID2 crate.
pub struct CreateAgentProfile {
	/// The unique identifier for the agent profile (CUID2) (must be generated unpacking the default implementation of this struct)
	pub id: String,
	/// The profile name
	pub name: String,
	/// Unix timestamp of the agent's kill date
	pub kill_date: Option<i64>,
	/// Array of unix timestamps of the hours the agent is allowed to work, in the format `[start, end]`.
	/// If empty, the agent is allowed to work 24/7.
	/// If more than 2 elements, the agent is allowed to work in multiple time ranges in the same day always in pairs
	/// of `[start, end]`, if the number of elements is odd, the last element is ignored
	pub working_hours: Option<Vec<i64>>,
	/// The agent's polling interval in milliseconds
	pub polling_interval: Option<i64>,
	/// The agent's polling jitter in milliseconds
	pub polling_jitter: Option<i64>,
}

impl Default for CreateAgentProfile {
	fn default() -> Self {
		Self {
			id: CUID2.create_id(),
			name: String::new(),
			kill_date: None,
			working_hours: None,
			polling_interval: None,
			polling_jitter: None,
		}
	}
}
